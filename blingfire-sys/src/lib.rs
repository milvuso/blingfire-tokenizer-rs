
#![allow(non_camel_case_types, non_upper_case_globals, non_snake_case)]
/* automatically generated by rust-bindgen */

#[doc = ""]
#[doc = " This class defines global limits for input and output of all modules."]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FALimits {
    pub _address: u8,
}
pub const FALimits_MaxArrSize: FALimits__bindgen_ty_1 = 1000000000;
pub const FALimits_MaxChainSize: FALimits__bindgen_ty_1 = 1000000000;
pub const FALimits_MaxStateVal: FALimits__bindgen_ty_1 = 1000000000;
pub const FALimits_MaxIwVal: FALimits__bindgen_ty_1 = 1000000000;
pub const FALimits_MaxIw: FALimits__bindgen_ty_1 = 1000000000;
pub const FALimits_MaxLdbDumpCount: FALimits__bindgen_ty_1 = 105;
pub const FALimits_MaxWordLen: FALimits__bindgen_ty_1 = 300;
pub const FALimits_MaxWordSize: FALimits__bindgen_ty_1 = 300;
pub const FALimits_MaxWordCount: FALimits__bindgen_ty_1 = 1000;
pub const FALimits_MaxParadigmSize: FALimits__bindgen_ty_1 = 1000;
pub const FALimits_MaxTagsPerWord: FALimits__bindgen_ty_1 = 100;
pub const FALimits_MinTag: FALimits__bindgen_ty_1 = 1;
pub const FALimits_MaxTag: FALimits__bindgen_ty_1 = 65535;
pub const FALimits_MaxGram: FALimits__bindgen_ty_1 = 4;
pub type FALimits__bindgen_ty_1 = u32;
#[test]
fn bindgen_test_layout_FALimits() {
    assert_eq!(
        ::std::mem::size_of::<FALimits>(),
        1usize,
        concat!("Size of: ", stringify!(FALimits))
    );
    assert_eq!(
        ::std::mem::align_of::<FALimits>(),
        1usize,
        concat!("Alignment of ", stringify!(FALimits))
    );
}
extern "C" {
    pub fn TextToSentences(
        pInUtf8Str: *const ::std::os::raw::c_char,